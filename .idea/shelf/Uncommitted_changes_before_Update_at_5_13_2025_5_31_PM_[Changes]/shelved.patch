Index: selenium-automation-final-project/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>target/\r\n!.mvn/wrapper/maven-wrapper.jar\r\n!**/src/main/**/target/\r\n!**/src/test/**/target/\r\n\r\n### IntelliJ IDEA ###\r\n.idea/modules.xml\r\n.idea/jarRepositories.xml\r\n.idea/compiler.xml\r\n.idea/libraries/\r\n*.iws\r\n*.iml\r\n*.ipr\r\n\r\n### Eclipse ###\r\n.apt_generated\r\n.classpath\r\n.factorypath\r\n.project\r\n.settings\r\n.springBeans\r\n.sts4-cache\r\n\r\n### NetBeans ###\r\n/nbproject/private/\r\n/nbbuild/\r\n/dist/\r\n/nbdist/\r\n/.nb-gradle/\r\nbuild/\r\n!**/src/main/**/build/\r\n!**/src/test/**/build/\r\n\r\n### VS Code ###\r\n.vscode/\r\n\r\n### Mac OS ###\r\n.DS_Store
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/selenium-automation-final-project/.gitignore b/selenium-automation-final-project/.gitignore
--- a/selenium-automation-final-project/.gitignore	(revision a0fc9d202c55c34fb9fd59b5eeea30ba38967534)
+++ b/selenium-automation-final-project/.gitignore	(date 1747146375763)
@@ -7,6 +7,8 @@
 .idea/modules.xml
 .idea/jarRepositories.xml
 .idea/compiler.xml
+.idea/workspace.xml
+
 .idea/libraries/
 *.iws
 *.iml
@@ -35,4 +37,5 @@
 .vscode/
 
 ### Mac OS ###
-.DS_Store
\ No newline at end of file
+.DS_Store
+
Index: selenium-automation-final-project/src/test/java/tests/CartPageTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests;\r\n\r\nimport org.openqa.selenium.By;\r\nimport org.testng.Assert;\r\nimport org.testng.annotations.BeforeMethod;\r\nimport org.testng.annotations.Test;\r\nimport pages.CartPage;\r\nimport pages.LoginPage;\r\nimport pages.ProductsPage;\r\nimport utils.ConfigReader;\r\nimport utils.DriverManager;\r\nimport utils.HelperMethods;\r\n\r\npublic class CartPageTest extends BaseTest {\r\n\r\n    private ProductsPage productsPage;\r\n    private CartPage cartPage;\r\n\r\n    @BeforeMethod\r\n    public void setUp() {\r\n        driver = DriverManager.getDriver();\r\n        driver.get(\"https://www.saucedemo.com/\");\r\n        System.out.println(\"Driver initialized successfully\");\r\n        System.out.println(\"Navigated to saucedemo.com\");\r\n\r\n        LoginPage loginPage = new LoginPage(driver);\r\n        productsPage = new ProductsPage(driver);\r\n        cartPage = new CartPage(driver);\r\n\r\n        loginPage.login(\r\n                ConfigReader.getProperty(\"username\"),\r\n                ConfigReader.getProperty(\"password\")\r\n        );\r\n        System.out.println(\"Logged in with username: standard_user\");\r\n\r\n        Assert.assertTrue(productsPage.isAt(),\r\n                \"Products page was not loaded successfully after login\");\r\n        System.out.println(\"Products page loaded successfully\");\r\n\r\n        // Add \"Sauce Labs Bike Light\" to cart directly\r\n        By addToCartButton = By.id(\"add-to-cart-sauce-labs-bike-light\");\r\n        HelperMethods.waitForVisibility(addToCartButton);\r\n        HelperMethods.clickWithRetry(addToCartButton, 3);\r\n        System.out.println(\"Clicked Add to Cart for Sauce Labs Bike Light\");\r\n\r\n        // Wait for cart badge to update to confirm addition\r\n        HelperMethods.waitForVisibility(By.cssSelector(\"#shopping_cart_container > a > span\"));\r\n        HelperMethods.wait(2); // Reduced wait to 2 seconds\r\n        System.out.println(\"Cart badge updated, count: \" + cartPage.getCartItemCount());\r\n\r\n        // Navigate to Cart page\r\n        productsPage.navigateToCart();\r\n        // Wait for cart page to load and items to appear\r\n        By cartItemName = By.xpath(\"//div[@class='inventory_item_name' and text()='Sauce Labs Bike Light']\");\r\n        HelperMethods.waitForVisibility(cartItemName); // Wait for specific item\r\n        HelperMethods.waitForVisibility(By.cssSelector(\"#cart_contents_container\"));\r\n        System.out.println(\"Navigated to Cart page after adding product. Current URL: \" + driver.getCurrentUrl());\r\n\r\n        // Verify navigation using URL directly\r\n        Assert.assertTrue(driver.getCurrentUrl().contains(\"cart.html\"),\r\n                \"Failed to navigate to Cart page (URL check failed)\");\r\n        System.out.println(\"Cart page loaded successfully\");\r\n    }\r\n\r\n    @Test(priority = 1, description = \"Verify the cart icon updates correctly after adding an item\")\r\n    public void verifyCartIconUpdatesOnAdd() {\r\n        Assert.assertEquals(cartPage.getCartItemCount(), 1,\r\n                \"Cart icon did not update correctly after adding an item\");\r\n        System.out.println(\"Cart badge updated after adding product, count: \" + cartPage.getCartItemCount());\r\n    }\r\n\r\n    @Test(priority = 2, description = \"Verify cart items are displayed correctly\")\r\n    public void verifyCartItemsDisplayedCorrectly() {\r\n        Assert.assertFalse(cartPage.getCartItems().isEmpty(), \"No items found in cart\");\r\n        Assert.assertFalse(cartPage.getItemNames().isEmpty(), \"Item names are not displayed\");\r\n        Assert.assertFalse(cartPage.getItemPrices().isEmpty(), \"Item prices are not displayed\");\r\n        System.out.println(\"Cart items verified: Names - \" + cartPage.getItemNames() + \", Prices - \" + cartPage.getItemPrices());\r\n    }\r\n\r\n    @Test(priority = 3, description = \"Verify the Remove button functionality\")\r\n    public void verifyRemoveButtonFunctionality() {\r\n        int initialCount = cartPage.getCartItems().size();\r\n        cartPage.removeItem();\r\n        HelperMethods.wait(1); // Reduced wait to 1 second\r\n        Assert.assertEquals(cartPage.getCartItems().size(), initialCount - 1,\r\n                \"Remove button did not remove the item from cart\");\r\n        System.out.println(\"Removed item, new cart item count: \" + cartPage.getCartItems().size());\r\n    }\r\n\r\n    @Test(priority = 4, description = \"Verify the cart icon updates correctly when items are removed\")\r\n    public void verifyCartIconUpdatesOnRemove() {\r\n        int initialCount = cartPage.getCartItemCount();\r\n        cartPage.removeItem();\r\n        HelperMethods.wait(1); // Reduced wait to 1 second\r\n        Assert.assertEquals(cartPage.getCartItemCount(), initialCount - 1,\r\n                \"Cart icon did not update correctly after removing an item\");\r\n        System.out.println(\"Cart icon updated after remove, count: \" + cartPage.getCartItemCount());\r\n    }\r\n\r\n    @Test(priority = 5, description = \"Verify the cart count resets after removing all items\")\r\n    public void verifyCartCountResets() {\r\n        cartPage.removeAllItems();\r\n        HelperMethods.wait(1); // Reduced wait to 1 second\r\n        Assert.assertEquals(cartPage.getCartItemCount(), 0,\r\n                \"Cart count did not reset to 0 after removing all items\");\r\n        System.out.println(\"Cart count reset to: \" + cartPage.getCartItemCount());\r\n    }\r\n\r\n    @Test(priority = 6, description = \"Verify Continue Shopping button navigates back to the product page\")\r\n    public void verifyContinueShoppingNavigation() {\r\n        cartPage.clickContinueShopping();\r\n        HelperMethods.wait(1); // Reduced wait to 1 second\r\n        Assert.assertTrue(productsPage.isAt(), \"Continue Shopping did not navigate to Products page\");\r\n        System.out.println(\"Navigated back to Products page via Continue Shopping\");\r\n    }\r\n\r\n    @Test(priority = 7, description = \"Verify Checkout button redirects to the checkout page\")\r\n    public void verifyCheckoutNavigation() {\r\n        cartPage.clickCheckout();\r\n        Assert.assertTrue(driver.getCurrentUrl().contains(\"checkout-step-one.html\"),\r\n                \"Checkout button did not redirect to the checkout page\");\r\n        System.out.println(\"Redirected to checkout page. Current URL: \" + driver.getCurrentUrl());\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/selenium-automation-final-project/src/test/java/tests/CartPageTest.java b/selenium-automation-final-project/src/test/java/tests/CartPageTest.java
--- a/selenium-automation-final-project/src/test/java/tests/CartPageTest.java	(revision a0fc9d202c55c34fb9fd59b5eeea30ba38967534)
+++ b/selenium-automation-final-project/src/test/java/tests/CartPageTest.java	(date 1747146524256)
@@ -11,6 +11,8 @@
 import utils.DriverManager;
 import utils.HelperMethods;
 
+import java.util.Objects;
+
 public class CartPageTest extends BaseTest {
 
     private ProductsPage productsPage;
@@ -57,7 +59,7 @@
         System.out.println("Navigated to Cart page after adding product. Current URL: " + driver.getCurrentUrl());
 
         // Verify navigation using URL directly
-        Assert.assertTrue(driver.getCurrentUrl().contains("cart.html"),
+        Assert.assertTrue(Objects.requireNonNull(driver.getCurrentUrl()).contains("cart.html"),
                 "Failed to navigate to Cart page (URL check failed)");
         System.out.println("Cart page loaded successfully");
     }
@@ -117,7 +119,7 @@
     @Test(priority = 7, description = "Verify Checkout button redirects to the checkout page")
     public void verifyCheckoutNavigation() {
         cartPage.clickCheckout();
-        Assert.assertTrue(driver.getCurrentUrl().contains("checkout-step-one.html"),
+        Assert.assertTrue(Objects.requireNonNull(driver.getCurrentUrl()).contains("checkout-step-one.html"),
                 "Checkout button did not redirect to the checkout page");
         System.out.println("Redirected to checkout page. Current URL: " + driver.getCurrentUrl());
     }
Index: selenium-automation-final-project/src/test/java/tests/ProductsTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package tests;\r\n\r\nimport org.openqa.selenium.WebElement;\r\nimport org.testng.Assert;\r\nimport org.testng.annotations.BeforeMethod;\r\nimport org.testng.annotations.Test;\r\nimport pages.LoginPage;\r\nimport pages.ProductsPage;\r\nimport utils.ConfigReader;\r\nimport utils.DriverManager;\r\n\r\nimport java.util.List;\r\n\r\npublic class ProductsTest extends BaseTest {\r\n\r\n    private ProductsPage productsPage;\r\n\r\n    @BeforeMethod\r\n    public void setUp() {\r\n        driver = DriverManager.getDriver();\r\n        driver.get(\"https://www.saucedemo.com/\");\r\n        System.out.println(\"Navigated to saucedemo.com\");\r\n\r\n        // Initialize pages\r\n        LoginPage loginPage = new LoginPage(driver);\r\n        productsPage = new ProductsPage(driver);\r\n\r\n        // Perform login\r\n        loginPage.login(\r\n                ConfigReader.getProperty(\"username\"),\r\n                ConfigReader.getProperty(\"password\")\r\n        );\r\n        System.out.println(\"Logged in with username: standard_user\");\r\n\r\n        // Verify products page is loaded\r\n        Assert.assertTrue(productsPage.isAt(),\r\n                \"Products page was not loaded successfully after login\");\r\n        System.out.println(\"Products page loaded successfully\");\r\n    }\r\n\r\n    @Test(priority = 1, description = \"Verify all product images are displayed\")\r\n    public void verifyProductImagesDisplay() {\r\n        List<WebElement> images = productsPage.getAllProductImages();\r\n        Assert.assertFalse(images.isEmpty(), \"No product images found\");\r\n        Assert.assertEquals(images.size(), 6, \"Expected 6 product images, but found \" + images.size());\r\n\r\n        boolean allImagesDisplayed = images.stream()\r\n                .allMatch(img -> {\r\n                    boolean displayed = img.isDisplayed();\r\n                    String src = img.getAttribute(\"src\");\r\n                    boolean srcValid = src != null && !src.isEmpty();\r\n                    System.out.println(\"Image displayed: \" + displayed + \", src: \" + src);\r\n                    return displayed && srcValid;\r\n                });\r\n\r\n        Assert.assertTrue(allImagesDisplayed,\r\n                \"Not all product images are displayed correctly or have invalid src\");\r\n    }\r\n\r\n    @Test(priority = 2, description = \"Verify product names are displayed and not empty\")\r\n    public void verifyProductNames() {\r\n        List<WebElement> names = productsPage.getAllProductNames();\r\n        Assert.assertFalse(names.isEmpty(), \"No product names found\");\r\n\r\n        boolean allNamesValid = names.stream()\r\n                .allMatch(name -> {\r\n                    boolean displayed = name.isDisplayed();\r\n                    String text = name.getText();\r\n                    boolean notEmpty = !text.trim().isEmpty();\r\n                    System.out.println(\"Name: \" + text + \", displayed: \" + displayed);\r\n                    return displayed && notEmpty;\r\n                });\r\n\r\n        Assert.assertTrue(allNamesValid,\r\n                \"Some product names are missing, empty, or not displayed\");\r\n    }\r\n\r\n    @Test(priority = 3, description = \"Verify product prices format\")\r\n    public void verifyProductPrices() {\r\n        List<WebElement> prices = productsPage.getAllProductPrices();\r\n        Assert.assertFalse(prices.isEmpty(), \"No product prices found\");\r\n\r\n        boolean allPricesValid = prices.stream()\r\n                .allMatch(price -> {\r\n                    boolean displayed = price.isDisplayed();\r\n                    String priceText = price.getText();\r\n                    boolean matchesFormat = priceText.matches(\"^\\\\$\\\\d+\\\\.\\\\d{2}$\");\r\n                    System.out.println(\"Price: \" + priceText + \", displayed: \" + displayed + \", matches format: \" + matchesFormat);\r\n                    return displayed && matchesFormat;\r\n                });\r\n\r\n        Assert.assertTrue(allPricesValid,\r\n                \"Some product prices have invalid format or are not displayed\");\r\n    }\r\n\r\n    @Test(priority = 4, description = \"Verify Add to Cart buttons are displayed and enabled\")\r\n    public void verifyAddToCartButtons() {\r\n        List<WebElement> buttons = productsPage.getAllAddToCartButtons();\r\n        Assert.assertFalse(buttons.isEmpty(), \"No Add to Cart buttons found\");\r\n\r\n        boolean allButtonsFunctional = buttons.stream()\r\n                .allMatch(btn -> {\r\n                    boolean displayed = btn.isDisplayed();\r\n                    boolean enabled = btn.isEnabled();\r\n                    System.out.println(\"Add to Cart button displayed: \" + displayed + \", enabled: \" + enabled);\r\n                    return displayed && enabled;\r\n                });\r\n\r\n        Assert.assertTrue(allButtonsFunctional,\r\n                \"Some Add to Cart buttons are not displayed or enabled\");\r\n    }\r\n\r\n    @Test(priority = 5, description = \"Verify sorting by Name (A-Z)\")\r\n    public void verifySortingAZ() {\r\n        productsPage.sortByNameAZ();\r\n        Assert.assertTrue(productsPage.isSortedByNameAZ(),\r\n                \"Products are not sorted correctly by Name (A-Z)\");\r\n    }\r\n\r\n    @Test(priority = 6, description = \"Verify sorting by Price (low to high)\")\r\n    public void verifySortingPriceLowHigh() {\r\n        productsPage.sortByPriceLowHigh();\r\n        Assert.assertTrue(productsPage.isSortedByPriceLowHigh(),\r\n                \"Products are not sorted correctly by Price (low to high)\");\r\n    }\r\n\r\n    @Test(priority = 7, description = \"Verify adding product to cart\")\r\n    public void verifyAddToCartFunctionality() {\r\n        int initialCount = productsPage.getCartItemCount();\r\n        System.out.println(\"Initial cart count: \" + initialCount);\r\n        productsPage.addFirstProductToCart();\r\n        int newCount = productsPage.getCartItemCount();\r\n        System.out.println(\"New cart count: \" + newCount);\r\n        Assert.assertEquals(newCount, initialCount + 1,\r\n                \"Cart count did not increase after adding product\");\r\n    }\r\n\r\n    @Test(priority = 8, description = \"Verify product descriptions are displayed and not empty\")\r\n    public void verifyProductDescriptions() {\r\n        List<WebElement> descriptions = productsPage.getAllProductDescriptions();\r\n        Assert.assertFalse(descriptions.isEmpty(), \"No product descriptions found\");\r\n\r\n        boolean allDescriptionsValid = descriptions.stream()\r\n                .allMatch(desc -> {\r\n                    boolean displayed = desc.isDisplayed();\r\n                    String text = desc.getText();\r\n                    boolean notEmpty = !text.trim().isEmpty();\r\n                    System.out.println(\"Description: \" + text + \", displayed: \" + displayed);\r\n                    return displayed && notEmpty;\r\n                });\r\n\r\n        Assert.assertTrue(allDescriptionsValid,\r\n                \"Some product descriptions are missing, empty, or not displayed\");\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/selenium-automation-final-project/src/test/java/tests/ProductsTest.java b/selenium-automation-final-project/src/test/java/tests/ProductsTest.java
--- a/selenium-automation-final-project/src/test/java/tests/ProductsTest.java	(revision a0fc9d202c55c34fb9fd59b5eeea30ba38967534)
+++ b/selenium-automation-final-project/src/test/java/tests/ProductsTest.java	(date 1747146524257)
@@ -1,6 +1,9 @@
 package tests;
 
+import org.openqa.selenium.By;
 import org.openqa.selenium.WebElement;
+import org.openqa.selenium.support.ui.ExpectedConditions;
+import org.openqa.selenium.support.ui.WebDriverWait;
 import org.testng.Assert;
 import org.testng.annotations.BeforeMethod;
 import org.testng.annotations.Test;
@@ -8,8 +11,9 @@
 import pages.ProductsPage;
 import utils.ConfigReader;
 import utils.DriverManager;
-
+import java.time.Duration;
 import java.util.List;
+import static org.testng.Assert.assertEquals;
 
 public class ProductsTest extends BaseTest {
 
@@ -42,7 +46,7 @@
     public void verifyProductImagesDisplay() {
         List<WebElement> images = productsPage.getAllProductImages();
         Assert.assertFalse(images.isEmpty(), "No product images found");
-        Assert.assertEquals(images.size(), 6, "Expected 6 product images, but found " + images.size());
+        assertEquals(images.size(), 6, "Expected 6 product images, but found " + images.size());
 
         boolean allImagesDisplayed = images.stream()
                 .allMatch(img -> {
@@ -131,7 +135,7 @@
         productsPage.addFirstProductToCart();
         int newCount = productsPage.getCartItemCount();
         System.out.println("New cart count: " + newCount);
-        Assert.assertEquals(newCount, initialCount + 1,
+        assertEquals(newCount, initialCount + 1,
                 "Cart count did not increase after adding product");
     }
 
@@ -152,4 +156,252 @@
         Assert.assertTrue(allDescriptionsValid,
                 "Some product descriptions are missing, empty, or not displayed");
     }
+
+    @Test(priority = 9, description = "Verify Remove button appears after adding to cart and decreases cart count")
+    public void verifyRemoveButtonFunctionality() {
+        // Step 1: Add a product to cart (if not already added)
+        if (productsPage.getCartItemCount() == 0) {
+            productsPage.addFirstProductToCart();
+        }
+        int initialCount = productsPage.getCartItemCount();
+        System.out.println("Initial cart count: " + initialCount);
+
+        // Step 2: Verify Remove button is displayed for the added product
+        WebElement removeButton = driver.findElement(By.xpath("//*[@id='remove-sauce-labs-backpack']"));
+        Assert.assertTrue(removeButton.isDisplayed(),
+                "Remove button is not displayed after adding product to cart");
+        System.out.println("Remove button is displayed");
+
+        // Step 3: Click the Remove button
+        removeButton.click();
+        System.out.println("Clicked Remove button");
+
+        // Step 4: Verify cart count decreases by 1
+        int updatedCount = productsPage.getCartItemCount();
+        assertEquals(updatedCount, initialCount - 1,
+                "Cart count did not decrease after removing product");
+        System.out.println("Updated cart count: " + updatedCount);
+
+        // Step 5: Verify Remove button changes back to "Add to Cart"
+        WebElement addButton = driver.findElement(By.xpath("//*[@id='add-to-cart-sauce-labs-backpack']"));
+        Assert.assertTrue(addButton.isDisplayed(),
+                "Add to Cart button did not reappear after removal");
+        System.out.println("Add to Cart button is displayed again");
+    }
+
+    @Test(priority = 10, description = "Verify 'Reset App State' persists after page refresh")
+    public void verifyResetAppStateFunctionality() {
+        // Temporary page methods (would normally be in ProductsPage)
+        class TempPageExtensions {
+            public void openMenu() {
+                new WebDriverWait(driver, Duration.ofSeconds(2))
+                        .until(ExpectedConditions.elementToBeClickable(
+                                By.id("react-burger-menu-btn")
+                        )).click();
+            }
+
+            public void resetAppState() {
+                new WebDriverWait(driver, Duration.ofSeconds(2))
+                        .until(ExpectedConditions.elementToBeClickable(
+                                By.id("reset_sidebar_link")
+                        )).click();
+            }
+
+            public void refreshPage() {
+                driver.navigate().refresh();
+                new WebDriverWait(driver, Duration.ofSeconds(2))
+                        .until(ExpectedConditions.presenceOfElementLocated(
+                                By.className("inventory_item")
+                        ));
+            }
+        }
+        TempPageExtensions page = new TempPageExtensions();
+
+        // 1. Add multiple items
+        productsPage.addFirstProductToCart();
+        productsPage.getAllAddToCartButtons().get(3).click(); // Add another item
+        int initialCount = productsPage.getCartItemCount();
+        assertEquals(initialCount, 2, "Should have 2 items in cart");
+
+        // 2. Reset app state
+        page.openMenu();
+        page.resetAppState();
+
+        // 3. Verify immediate reset
+        new WebDriverWait(driver, Duration.ofSeconds(1))
+                .until(d -> productsPage.getCartItemCount() == 0);
+        System.out.println("Cart reset verified before refresh");
+
+        // 4. Refresh and verify persistence
+        page.refreshPage();
+        int postRefreshCount = productsPage.getCartItemCount();
+        assertEquals(postRefreshCount, 0,
+                "Cart should remain empty after refresh");
+        System.out.println("Reset state persisted after refresh");
+
+        // 5. Verify all buttons reset
+        long removeButtons = driver.findElements(By.xpath("//button[text()='REMOVE']"))
+                .size();
+        assertEquals(removeButtons, 0,
+                "All buttons should show 'ADD TO CART' after reset + refresh");
+    }
+
+
+    @Test(priority = 11, description = "Verify product details page navigation and content")
+    public void verifyProductDetailsPage() {
+        // 1. Store product info from inventory list
+        WebElement firstProduct = driver.findElement(By.cssSelector(".inventory_item:first-child"));
+        String expectedName = firstProduct.findElement(By.cssSelector(".inventory_item_name")).getText();
+        String expectedPrice = firstProduct.findElement(By.cssSelector(".inventory_item_price")).getText();
+        String expectedDesc = firstProduct.findElement(By.cssSelector(".inventory_item_desc")).getText();
+
+        // 2. Click product name to navigate to details
+        firstProduct.findElement(By.cssSelector(".inventory_item_name")).click();
+
+        // 3. Verify details page elements
+        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(3));
+        wait.until(ExpectedConditions.urlContains("inventory-item.html"));
+
+        Assert.assertEquals(
+                driver.findElement(By.cssSelector(".inventory_details_name")).getText(),
+                expectedName,
+                "Product name mismatch"
+        );
+
+        Assert.assertEquals(
+                driver.findElement(By.cssSelector(".inventory_details_price")).getText(),
+                expectedPrice,
+                "Product price mismatch"
+        );
+
+        Assert.assertEquals(
+                driver.findElement(By.cssSelector(".inventory_details_desc")).getText(),
+                expectedDesc,
+                "Product description mismatch"
+        );
+
+        // 4. Verify back button returns to products
+        driver.findElement(By.id("back-to-products")).click();
+        wait.until(ExpectedConditions.urlMatches(".*inventory.html$"));
+    }
+
+    @Test(priority = 13, description = "Verify shopping cart badge counter updates correctly")
+    public void verifyCartBadgeCounter() {
+        // 1. Reset state by removing all items
+        driver.findElements(By.cssSelector(".btn_inventory"))
+                .forEach(btn -> {
+                    if(btn.getText().equals("REMOVE")) {
+                        btn.click();
+                    }
+                });
+
+        // 2. Verify badge is empty initially
+        List<WebElement> badges = driver.findElements(By.cssSelector(".shopping_cart_badge"));
+        Assert.assertTrue(badges.isEmpty(), "Cart badge should be hidden when empty");
+
+        // 3. Add items and verify counter
+        driver.findElements(By.cssSelector(".btn_inventory"))
+                .stream()
+                .limit(5)
+                .forEach(btn -> btn.click());
+
+        // 4. Verify badge shows correct count
+        int badgeCount = Integer.parseInt(
+                driver.findElement(By.cssSelector(".shopping_cart_badge")).getText()
+        );
+        Assert.assertEquals(badgeCount, 5, "Cart badge shows wrong quantity");
+
+        // 5. Remove one item and verify update
+        driver.findElement(By.cssSelector(".btn_inventory")).click();
+        badgeCount = Integer.parseInt(
+                driver.findElement(By.cssSelector(".shopping_cart_badge")).getText()
+        );
+        Assert.assertEquals(badgeCount, 4, "Cart badge didn't update after removal");
+    }
+
+
+    @Test(priority = 14, description = "Verify item removal from cart page")
+    public void verifyCartItemRemoval() {
+        // 1. Add an item to cart if none exists
+        if (driver.findElements(By.cssSelector(".shopping_cart_badge")).isEmpty()) {
+            driver.findElement(By.cssSelector(".btn_inventory")).click();
+        }
+
+        // 2. Navigate to cart
+        driver.findElement(By.cssSelector(".shopping_cart_link")).click();
+        Assert.assertTrue(driver.getCurrentUrl().contains("cart.html"), "Did not navigate to cart page");
+
+        // 3. Verify item exists in cart
+        List<WebElement> cartItems = driver.findElements(By.cssSelector(".cart_item"));
+        Assert.assertFalse(cartItems.isEmpty(), "No items found in cart");
+
+        // 4. Remove item
+        String removedItemName = driver.findElement(By.cssSelector(".inventory_item_name")).getText();
+        driver.findElement(By.cssSelector(".cart_button")).click();
+
+        // 5. Verify removal
+        new WebDriverWait(driver, Duration.ofSeconds(3))
+                .until(ExpectedConditions.invisibilityOf(cartItems.get(0)));
+
+        // 6. Verify badge updates
+        Assert.assertTrue(driver.findElements(By.cssSelector(".shopping_cart_badge")).isEmpty(),
+                "Cart badge should disappear after removing last item");
+
+        // 7. Verify continue shopping works
+        driver.findElement(By.id("continue-shopping")).click();
+        Assert.assertTrue(driver.getCurrentUrl().contains("inventory.html"),
+                "Did not return to products page");
+
+        // 8. Verify removed item shows "ADD TO CART" again
+        List<WebElement> allProducts = driver.findElements(By.cssSelector(".inventory_item_name"));
+        WebElement removedProduct = allProducts.stream()
+                .filter(p -> p.getText().equals(removedItemName))
+                .findFirst()
+                .orElseThrow();
+
+        Assert.assertEquals(removedProduct.findElement(By.xpath("./ancestor::div[@class='inventory_item']//button")).getText(),
+                "Add to cart",
+                "Item button didn't reset after removal");
+    }
+
+    @Test(priority = 15, description = "Verify product description page content")
+    public void verifyProductDescriptionPage() {
+        // 1. Store first product's details from inventory
+        WebElement firstProduct = driver.findElement(By.cssSelector(".inventory_item"));
+        String listName = firstProduct.findElement(By.cssSelector(".inventory_item_name")).getText();
+        String listPrice = firstProduct.findElement(By.cssSelector(".inventory_item_price")).getText();
+        String listDesc = firstProduct.findElement(By.cssSelector(".inventory_item_desc")).getText();
+
+        // 2. Navigate to product details
+        firstProduct.findElement(By.cssSelector(".inventory_item_name")).click();
+        new WebDriverWait(driver, Duration.ofSeconds(3))
+                .until(ExpectedConditions.urlContains("inventory-item.html"));
+
+        // 3. Verify all detail elements exist
+        Assert.assertTrue(driver.findElement(By.cssSelector(".inventory_details_img")).isDisplayed(),
+                "Product image missing");
+        Assert.assertTrue(driver.findElement(By.cssSelector(".inventory_details_name")).isDisplayed(),
+                "Product name missing");
+        Assert.assertTrue(driver.findElement(By.cssSelector(".inventory_details_price")).isDisplayed(),
+                "Product price missing");
+        Assert.assertTrue(driver.findElement(By.cssSelector(".inventory_details_desc")).isDisplayed(),
+                "Product description missing");
+        Assert.assertTrue(driver.findElement(By.cssSelector(".btn_inventory")).isDisplayed(),
+                "Add to cart button missing");
+
+        // 4. Verify content matches inventory listing
+        Assert.assertEquals(driver.findElement(By.cssSelector(".inventory_details_name")).getText(),
+                listName, "Name mismatch");
+        Assert.assertEquals(driver.findElement(By.cssSelector(".inventory_details_price")).getText(),
+                listPrice, "Price mismatch");
+        Assert.assertEquals(driver.findElement(By.cssSelector(".inventory_details_desc")).getText(),
+                listDesc, "Description mismatch");
+
+        // 5. Verify back-to-products functionality
+        driver.findElement(By.id("back-to-products")).click();
+        Assert.assertTrue(driver.getCurrentUrl().endsWith("inventory.html"),
+                "Did not return to product list");
+    }
+
+
 }
\ No newline at end of file
Index: selenium-automation-final-project/pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n    <modelVersion>4.0.0</modelVersion>\r\n    <groupId>com.selenium.framework</groupId>\r\n    <artifactId>selenium-automation</artifactId>\r\n    <version>1.0-SNAPSHOT</version>\r\n    <properties>\r\n        <maven.compiler.source>21</maven.compiler.source>\r\n        <maven.compiler.target>21</maven.compiler.target>\r\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\r\n    </properties>\r\n    <dependencies>\r\n        <dependency>\r\n            <groupId>org.seleniumhq.selenium</groupId>\r\n            <artifactId>selenium-java</artifactId>\r\n            <version>4.31.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.seleniumhq.selenium</groupId>\r\n            <artifactId>selenium-manager</artifactId>\r\n            <version>4.31.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.github.bonigarcia</groupId>\r\n            <artifactId>webdrivermanager</artifactId>\r\n            <version>5.7.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>io.qameta.allure</groupId>\r\n            <artifactId>allure-testng</artifactId>\r\n            <version>2.29.0</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.testng</groupId>\r\n            <artifactId>testng</artifactId>\r\n            <version>7.7.1</version>\r\n            <scope>test</scope>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.slf4j</groupId>\r\n            <artifactId>slf4j-api</artifactId>\r\n            <version>2.0.7</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>ch.qos.logback</groupId>\r\n            <artifactId>logback-classic</artifactId>\r\n            <version>1.4.8</version>\r\n        </dependency>\r\n        <dependency>\r\n            <groupId>org.aspectj</groupId>\r\n            <artifactId>aspectjweaver</artifactId>\r\n            <version>1.9.22</version>\r\n        </dependency>\r\n    </dependencies>\r\n   <!-- <build>\r\n        <plugins>\r\n            <plugin>\r\n                <groupId>org.apache.maven.plugins</groupId>\r\n                <artifactId>maven-surefire-plugin</artifactId>\r\n                <version>3.2.5</version>\r\n                <configuration>\r\n                    <suiteXmlFiles>\r\n                        <suiteXmlFile>testng.xml</suiteXmlFile>\r\n                    </suiteXmlFiles>\r\n                    <properties>\r\n                        <property>\r\n                            <name>listener</name>\r\n                            <value>io.qameta.allure.testng.AllureTestNg</value>\r\n                        </property>\r\n                    </properties>\r\n                    <argLine>-javaagent:${settings.localRepository}/org/aspectj/aspectjweaver/1.9.22/aspectjweaver-1.9.22.jar</argLine>\r\n                </configuration>\r\n                <dependencies>\r\n                    <dependency>\r\n                        <groupId>org.aspectj</groupId>\r\n                        <artifactId>aspectjweaver</artifactId>\r\n                        <version>1.9.22</version>\r\n                    </dependency>\r\n                </dependencies>\r\n            </plugin>\r\n            <plugin>\r\n                <groupId>io.qameta.allure</groupId>\r\n                <artifactId>allure-maven</artifactId>\r\n                <version>2.12.0</version>\r\n                <configuration>\r\n                    <reportVersion>2.29.0</reportVersion>\r\n                    <resultsDirectory>${project.build.directory}/allure-results</resultsDirectory>\r\n                </configuration>\r\n            </plugin>\r\n        </plugins>\r\n    </build>-->\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/selenium-automation-final-project/pom.xml b/selenium-automation-final-project/pom.xml
--- a/selenium-automation-final-project/pom.xml	(revision a0fc9d202c55c34fb9fd59b5eeea30ba38967534)
+++ b/selenium-automation-final-project/pom.xml	(date 1747146613392)
@@ -1,20 +1,28 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
     <modelVersion>4.0.0</modelVersion>
+
     <groupId>com.selenium.framework</groupId>
     <artifactId>selenium-automation</artifactId>
     <version>1.0-SNAPSHOT</version>
+
     <properties>
         <maven.compiler.source>21</maven.compiler.source>
         <maven.compiler.target>21</maven.compiler.target>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
     </properties>
     <dependencies>
+
+        <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
+        <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java -->
         <dependency>
             <groupId>org.seleniumhq.selenium</groupId>
             <artifactId>selenium-java</artifactId>
             <version>4.31.0</version>
         </dependency>
+        <!-- https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-manager -->
         <dependency>
             <groupId>org.seleniumhq.selenium</groupId>
             <artifactId>selenium-manager</artifactId>
@@ -25,16 +33,12 @@
             <artifactId>webdrivermanager</artifactId>
             <version>5.7.0</version>
         </dependency>
-        <dependency>
-            <groupId>io.qameta.allure</groupId>
-            <artifactId>allure-testng</artifactId>
-            <version>2.29.0</version>
-        </dependency>
+
         <dependency>
             <groupId>org.testng</groupId>
             <artifactId>testng</artifactId>
             <version>7.7.1</version>
-            <scope>test</scope>
+            <scope>compile</scope>
         </dependency>
         <dependency>
             <groupId>org.slf4j</groupId>
@@ -46,47 +50,7 @@
             <artifactId>logback-classic</artifactId>
             <version>1.4.8</version>
         </dependency>
-        <dependency>
-            <groupId>org.aspectj</groupId>
-            <artifactId>aspectjweaver</artifactId>
-            <version>1.9.22</version>
-        </dependency>
+
     </dependencies>
-   <!-- <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-surefire-plugin</artifactId>
-                <version>3.2.5</version>
-                <configuration>
-                    <suiteXmlFiles>
-                        <suiteXmlFile>testng.xml</suiteXmlFile>
-                    </suiteXmlFiles>
-                    <properties>
-                        <property>
-                            <name>listener</name>
-                            <value>io.qameta.allure.testng.AllureTestNg</value>
-                        </property>
-                    </properties>
-                    <argLine>-javaagent:${settings.localRepository}/org/aspectj/aspectjweaver/1.9.22/aspectjweaver-1.9.22.jar</argLine>
-                </configuration>
-                <dependencies>
-                    <dependency>
-                        <groupId>org.aspectj</groupId>
-                        <artifactId>aspectjweaver</artifactId>
-                        <version>1.9.22</version>
-                    </dependency>
-                </dependencies>
-            </plugin>
-            <plugin>
-                <groupId>io.qameta.allure</groupId>
-                <artifactId>allure-maven</artifactId>
-                <version>2.12.0</version>
-                <configuration>
-                    <reportVersion>2.29.0</reportVersion>
-                    <resultsDirectory>${project.build.directory}/allure-results</resultsDirectory>
-                </configuration>
-            </plugin>
-        </plugins>
-    </build>-->
+
 </project>
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"51d5124b-c9e8-49da-a416-e9ef50aadbd6\" name=\"Changes\" comment=\"last upadates &#10;there is one issue try to solve it &#10;&#10;the waiting in 3rd to 5th scenario the waiting is to long try to decrease the time of waiting\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Hattabvic&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/Hattabvic/DEPI-Graduate-Project-.git&quot;,\r\n    &quot;accountId&quot;: &quot;26c0363a-ec10-44c4-910f-256c6d8849f2&quot;\r\n  }\r\n}</component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"file://$PROJECT_DIR$/selenium-automation-final-project/src/test/java/tests/LoginTest.java\" root0=\"SKIP_INSPECTION\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 4\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2wVX8sTbR5veNUPJsmqFAJobjsm\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"TestNG.C:/Users/NEXT STORE/OneDrive/Desktop/final project automation/selenium-automation-final-project/src/test/resources/testng.xml.executor\": \"Run\",\r\n    \"TestNG.CartPageTest.executor\": \"Run\",\r\n    \"TestNG.CartPageTest.verifyCartIconUpdatesOnAdd.executor\": \"Run\",\r\n    \"TestNG.CartPageTest.verifyCheckoutNavigation.executor\": \"Debug\",\r\n    \"TestNG.First.executor\": \"Run\",\r\n    \"TestNG.First.openSwagLabs.executor\": \"Run\",\r\n    \"TestNG.LoginTest.executor\": \"Run\",\r\n    \"TestNG.ProductsTest.executor\": \"Run\",\r\n    \"TestNG.ProductsTest.verifyProductImagesDisplay.executor\": \"Run\",\r\n    \"TestNG.first.openSwagLabs.executor\": \"Run\",\r\n    \"TestNG.iLoginTest.executor\": \"Run\",\r\n    \"git-widget-placeholder\": \"main\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"project.structure.last.edited\": \"Project\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.5443038\",\r\n    \"settings.editor.selected.configurable\": \"settings.qodana\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"CartPageTest\" type=\"TestNG\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"selenium-automation\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"tests.ProductsPageTest\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"tests\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"tests.CartPageTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"CLASS\" />\r\n      <properties />\r\n      <listeners />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"CartPageTest.verifyCartIconUpdatesOnAdd\" type=\"TestNG\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"selenium-automation\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"tests.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"tests\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"tests.CartPageTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"verifyCartIconUpdatesOnAdd\" />\r\n      <option name=\"TEST_OBJECT\" value=\"METHOD\" />\r\n      <properties />\r\n      <listeners />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"CartPageTest.verifyCheckoutNavigation\" type=\"TestNG\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"selenium-automation\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"tests.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"tests\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"tests.CartPageTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"verifyCheckoutNavigation\" />\r\n      <option name=\"TEST_OBJECT\" value=\"METHOD\" />\r\n      <properties />\r\n      <listeners />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ProductsTest\" type=\"TestNG\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"selenium-automation\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"tests.ProductsPageTest\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"tests\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"tests.ProductsTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"CLASS\" />\r\n      <properties />\r\n      <listeners />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ProductsTest.verifyProductImagesDisplay\" type=\"TestNG\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"selenium-automation\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"tests.ProductsPageTest\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"tests\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"tests.ProductsTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"verifyProductImagesDisplay\" />\r\n      <option name=\"TEST_OBJECT\" value=\"METHOD\" />\r\n      <properties />\r\n      <listeners />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"TestNG.CartPageTest.verifyCheckoutNavigation\" />\r\n        <item itemvalue=\"TestNG.ProductsTest\" />\r\n        <item itemvalue=\"TestNG.ProductsTest.verifyProductImagesDisplay\" />\r\n        <item itemvalue=\"TestNG.CartPageTest\" />\r\n        <item itemvalue=\"TestNG.CartPageTest.verifyCartIconUpdatesOnAdd\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"51d5124b-c9e8-49da-a416-e9ef50aadbd6\" name=\"Changes\" comment=\"\" />\r\n      <created>1746127563377</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1746127563377</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"last upadates &#10;there is one issue try to solve it &#10;&#10;the waiting in 3rd to 5th scenario the waiting is to long try to decrease the time of waiting\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1746972222447</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1746972222447</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"2\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"main\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Initial commit\" />\r\n    <MESSAGE value=\"last upadates\" />\r\n    <MESSAGE value=\"last upadates &#10;there is one issue try to solve it &#10;&#10;the waiting in 3rd to 5th scenario the waiting is to long try to decrease the time of waiting\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"last upadates &#10;there is one issue try to solve it &#10;&#10;the waiting in 3rd to 5th scenario the waiting is to long try to decrease the time of waiting\" />\r\n  </component>\r\n  <component name=\"XDebuggerManager\">\r\n    <breakpoint-manager>\r\n      <breakpoints>\r\n        <line-breakpoint enabled=\"true\" type=\"java-line\">\r\n          <url>file://$PROJECT_DIR$/selenium-automation-final-project/src/test/java/tests/CartPageTest.java</url>\r\n          <line>119</line>\r\n          <option name=\"timeStamp\" value=\"1\" />\r\n        </line-breakpoint>\r\n      </breakpoints>\r\n    </breakpoint-manager>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a0fc9d202c55c34fb9fd59b5eeea30ba38967534)
+++ b/.idea/workspace.xml	(date 1747146652529)
@@ -4,7 +4,25 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="51d5124b-c9e8-49da-a416-e9ef50aadbd6" name="Changes" comment="last upadates &#10;there is one issue try to solve it &#10;&#10;the waiting in 3rd to 5th scenario the waiting is to long try to decrease the time of waiting" />
+    <list default="true" id="51d5124b-c9e8-49da-a416-e9ef50aadbd6" name="Changes" comment="last upadates">
+      <change afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/pages/ProductsPage.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/tests/ProductsTest.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/tests/iLoginTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/main/java/utils/ConfigReader.java" beforeDir="false" afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/main/java/utils/ConfigReader.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/main/java/utils/DriverManager.java" beforeDir="false" afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/main/java/utils/DriverManager.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/main/java/utils/HelperMethods.java" beforeDir="false" afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/main/java/utils/HelperMethods.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/pages/BasePage.java" beforeDir="false" afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/pages/BasePage.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/pages/CartPage.java" beforeDir="false" afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/pages/CartPage.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/pages/LoginPage.java" beforeDir="false" afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/pages/LoginPage.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/pages/ProductPage.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/tests/BaseTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/tests/BaseTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/tests/CartPageTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/tests/CartPageTest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/tests/LoginTest.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/test/java/tests/ProductPageTest.java" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/test/resources/config.properties" beforeDir="false" afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/test/resources/config.properties" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/selenium-automation-final-project/src/test/resources/testng.xml" beforeDir="false" afterPath="$PROJECT_DIR$/selenium-automation-final-project/src/test/resources/testng.xml" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -46,30 +64,30 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "RunOnceActivity.git.unshallow": "true",
-    "TestNG.C:/Users/NEXT STORE/OneDrive/Desktop/final project automation/selenium-automation-final-project/src/test/resources/testng.xml.executor": "Run",
-    "TestNG.CartPageTest.executor": "Run",
-    "TestNG.CartPageTest.verifyCartIconUpdatesOnAdd.executor": "Run",
-    "TestNG.CartPageTest.verifyCheckoutNavigation.executor": "Debug",
-    "TestNG.First.executor": "Run",
-    "TestNG.First.openSwagLabs.executor": "Run",
-    "TestNG.LoginTest.executor": "Run",
-    "TestNG.ProductsTest.executor": "Run",
-    "TestNG.ProductsTest.verifyProductImagesDisplay.executor": "Run",
-    "TestNG.first.openSwagLabs.executor": "Run",
-    "TestNG.iLoginTest.executor": "Run",
-    "git-widget-placeholder": "main",
-    "kotlin-language-version-configured": "true",
-    "project.structure.last.edited": "Project",
-    "project.structure.proportion": "0.15",
-    "project.structure.side.proportion": "0.5443038",
-    "settings.editor.selected.configurable": "settings.qodana"
+  <component name="PropertiesComponent">{
+  &quot;keyToString&quot;: {
+    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
+    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,
+    &quot;TestNG.C:/Users/NEXT STORE/OneDrive/Desktop/final project automation/selenium-automation-final-project/src/test/resources/testng.xml.executor&quot;: &quot;Run&quot;,
+    &quot;TestNG.CartPageTest.executor&quot;: &quot;Run&quot;,
+    &quot;TestNG.CartPageTest.verifyCartIconUpdatesOnAdd.executor&quot;: &quot;Run&quot;,
+    &quot;TestNG.CartPageTest.verifyCheckoutNavigation.executor&quot;: &quot;Run&quot;,
+    &quot;TestNG.First.executor&quot;: &quot;Run&quot;,
+    &quot;TestNG.First.openSwagLabs.executor&quot;: &quot;Run&quot;,
+    &quot;TestNG.LoginTest.executor&quot;: &quot;Run&quot;,
+    &quot;TestNG.ProductsTest.executor&quot;: &quot;Run&quot;,
+    &quot;TestNG.ProductsTest.verifyProductImagesDisplay.executor&quot;: &quot;Run&quot;,
+    &quot;TestNG.first.openSwagLabs.executor&quot;: &quot;Run&quot;,
+    &quot;TestNG.iLoginTest.executor&quot;: &quot;Run&quot;,
+    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
+    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
+    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,
+    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
+    &quot;project.structure.side.proportion&quot;: &quot;0.5443038&quot;,
+    &quot;settings.editor.selected.configurable&quot;: &quot;settings.qodana&quot;
   }
-}]]></component>
-  <component name="RunManager">
+}</component>
+  <component name="RunManager" selected="TestNG.CartPageTest">
     <configuration name="CartPageTest" type="TestNG" temporary="true" nameIsGenerated="true">
       <module name="selenium-automation" />
       <extension name="coverage">
@@ -177,15 +195,6 @@
       <option name="presentableId" value="Default" />
       <updated>1746127563377</updated>
     </task>
-    <task id="LOCAL-00001" summary="last upadates &#10;there is one issue try to solve it &#10;&#10;the waiting in 3rd to 5th scenario the waiting is to long try to decrease the time of waiting">
-      <option name="closed" value="true" />
-      <created>1746972222447</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1746972222447</updated>
-    </task>
-    <option name="localTasksCounter" value="2" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -212,20 +221,7 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="Initial commit" />
     <MESSAGE value="last upadates" />
-    <MESSAGE value="last upadates &#10;there is one issue try to solve it &#10;&#10;the waiting in 3rd to 5th scenario the waiting is to long try to decrease the time of waiting" />
-    <option name="LAST_COMMIT_MESSAGE" value="last upadates &#10;there is one issue try to solve it &#10;&#10;the waiting in 3rd to 5th scenario the waiting is to long try to decrease the time of waiting" />
-  </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/selenium-automation-final-project/src/test/java/tests/CartPageTest.java</url>
-          <line>119</line>
-          <option name="timeStamp" value="1" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
+    <option name="LAST_COMMIT_MESSAGE" value="last upadates" />
   </component>
 </project>
\ No newline at end of file
Index: selenium-automation-final-project/src/main/java/utils/DriverManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package utils;\r\n\r\nimport io.github.bonigarcia.wdm.WebDriverManager;\r\nimport org.openqa.selenium.WebDriver;\r\nimport org.openqa.selenium.chrome.ChromeDriver;\r\n\r\nimport java.time.Duration;\r\n\r\npublic class DriverManager {\r\n\r\n    private static WebDriver driver;\r\n\r\n    public static WebDriver getDriver() {\r\n        if (driver == null || ((ChromeDriver) driver).getSessionId() == null) {\r\n            WebDriverManager.chromedriver().setup();\r\n            driver = new ChromeDriver();\r\n            driver.manage().window().maximize();\r\n            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10)); // إضافة انتظار ضمني\r\n        }\r\n        return driver;\r\n    }\r\n\r\n    public static void quitDriver() {\r\n        if (driver != null) {\r\n            driver.quit();\r\n            driver = null;\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/selenium-automation-final-project/src/main/java/utils/DriverManager.java b/selenium-automation-final-project/src/main/java/utils/DriverManager.java
--- a/selenium-automation-final-project/src/main/java/utils/DriverManager.java	(revision a0fc9d202c55c34fb9fd59b5eeea30ba38967534)
+++ b/selenium-automation-final-project/src/main/java/utils/DriverManager.java	(date 1747146524255)
@@ -3,8 +3,10 @@
 import io.github.bonigarcia.wdm.WebDriverManager;
 import org.openqa.selenium.WebDriver;
 import org.openqa.selenium.chrome.ChromeDriver;
+import org.openqa.selenium.chrome.ChromeOptions;
+import java.util.HashMap;
+import java.util.Map;
 
-import java.time.Duration;
 
 public class DriverManager {
 
@@ -12,18 +14,77 @@
 
     public static WebDriver getDriver() {
         if (driver == null || ((ChromeDriver) driver).getSessionId() == null) {
+            // Configure Chrome options
+            ChromeOptions options = createChromeOptions();
+
+            // Setup WebDriverManager and create driver with options
             WebDriverManager.chromedriver().setup();
-            driver = new ChromeDriver();
+            driver = new ChromeDriver(options);
+
+            // Maximize window
             driver.manage().window().maximize();
-            driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10)); // إضافة انتظار ضمني
         }
         return driver;
     }
 
+    /**
+     * Creates ChromeOptions with settings for SourceDemo website
+     * @return ChromeOptions with custom settings
+     */
+    private static ChromeOptions createChromeOptions() {
+        ChromeOptions options = new ChromeOptions();
+
+        // Disable password-related popups (including "Change your password")
+        Map<String, Object> prefs = new HashMap<>();
+
+        // Disable Chrome's password manager entirely
+        prefs.put("credentials_enable_service", false);
+        prefs.put("profile.password_manager_enabled", false);
+
+        // Disable password-saving prompts
+        prefs.put("profile.default_content_settings.password_manager_enabled", false);
+        prefs.put("profile.default_content_settings.password_saving_disabled", true);
+
+        // Disable "Change password" prompts (new in Chrome 90+)
+        prefs.put("profile.password_protection_enabled", false);
+        prefs.put("profile.password_bubble_enabled", false);
+
+        // Disable autofill and password-related popups
+        prefs.put("autofill.enabled", false);
+        prefs.put("autofill.profile_enabled", false);
+
+        // Disable Chrome's built-in password leak detection (which may trigger popups)
+        prefs.put("profile.password_manager_leak_detection", false);
+
+        options.setExperimentalOption("prefs", prefs);
+
+        // Additional Chrome arguments to suppress popups
+        options.addArguments(
+                "--disable-infobars",
+                "--disable-popup-blocking",
+                "--disable-notifications",
+                "--disable-save-password-bubble",  // Explicitly disable password save prompts
+                "--disable-autofill-keyboard-accessory-view", // Disable autofill suggestions
+                "--disable-features=PasswordChange,PasswordLeakDetection" // Disable password-related features
+        );
+
+        // Exclude switches to hide automation-related UI
+        options.setExperimentalOption("excludeSwitches",
+                new String[]{
+                        "enable-automation",
+                        "load-extension",
+                        "ignore-certificate-errors"
+                }
+        );
+
+        return options;
+    }
+
     public static void quitDriver() {
         if (driver != null) {
             driver.quit();
             driver = null;
         }
     }
+
 }
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null	(date 1747146524252)
+++ b/README.md	(date 1747146524252)
@@ -0,0 +1,13 @@
+🧪 SauceDemo Automation Testing Framework
+This project is an automated testing framework for the SauceDemo e-commerce website. It utilizes Java, Selenium WebDriver, and TestNG to perform end-to-end testing of critical user flows, including login/logout, product browsing, cart management, and the checkout process.
+
+✅ Features
+Automated testing of key functionalities on SauceDemo:
+
+User login and logout
+
+Product page interactions
+
+Cart operations
+
+Checkout process
